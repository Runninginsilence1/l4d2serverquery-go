package steamquery

import (
	"fmt"
	"log"
	"net"
	"os"
	"time"

	"l4d2serverquery-go/pkg/steamquery/parse_data"
)

func AddServer(serverHost string) {
	host, p, err := net.SplitHostPort(serverHost)
	if err != nil {
		return
	}

	fmt.Println("解析到服务器:", host, p)

	sqlString := SqlString(host, p)

	WriteIntoDatabase([]string{sqlString})
}

func QueryMasterServer(serverName string, page, pageSize int) []parse_data.Server {
	data, err := GetDataWithName(serverName, page, pageSize)
	if err != nil {
		log.Println("查询服务器数据失败:", err)
		return nil
	}

	servers := Servers(data)

	return servers
}

func RunWithServerName(serverName string, printSql bool, sqliteOpt bool, page, pageSize int) {
	data, err := GetDataWithName(serverName, page, pageSize)
	if err != nil {
		log.Println(err)
		return
	}

	servers := Servers(data)

	if printSql {
		//sql := GenSql(servers)
		//WriteIntoDatabase(sql)

		GenDbModel(servers)
	} else if sqliteOpt {
		for _, server := range servers {
			// 打印 sqlite 的 sql 语句就行
			fmt.Printf("insert into favorite_servers (addr, desc) values ('%v:%v', 'Generated by l4d2-parser written in Go');\n",
				server.IpAddress,
				server.Port,
			)
		}
	} else {
		for _, server := range servers {
			fmt.Println(server.EasyInfo())
		}
	}

	fmt.Println("服务器数量:", len(servers))

}

func Run() {
	noArgs()
}

func argWithName() {
	serverName := "芙芙"

	if len(os.Args) > 1 {

	} else {
		fmt.Println("默认使用", serverName)
	}
}

func noArgs() {
	var t time.Time

	t = time.Now()
	data, err := GetData()
	if err != nil {
		panic(err)
	}
	fmt.Printf("%v, 耗时: %v ms\n", "获取服务器数据", time.Since(t).Milliseconds())
	t = time.Now()
	sqls := ParseData(data)
	WriteIntoDatabase(sqls)
	fmt.Printf("%v, 耗时: %v ms\n", "写入数据到数据库", time.Since(t).Milliseconds())
}
