package steamquery

import (
	"encoding/json"
	"fmt"
	"strconv"

	"github.com/tidwall/gjson"
	"l4d2serverquery-go/pkg/steamquery/parse_data"
)

func GenSql(servers []parse_data.Server) []string {
	var sqlToExecute []string

	for _, server := range servers {
		sqlToExecute = append(sqlToExecute, SqlString(server.IpAddress, strconv.Itoa(server.Port)))
	}

	return sqlToExecute
}

func GenDbModel(servers []parse_data.Server) {
	db := GetPgDB()

	for _, server := range servers {
		dbModel := FavoriteServer{
			Host: server.IpAddress,
			Port: server.Port,
			Desc: "Generated by l4d2-parser written in Go",
			Addr: fmt.Sprintf("%v:%v", server.IpAddress, server.Port),
		}

		if err := db.Create(&dbModel).Error; err != nil {
			fmt.Printf("创建失败: %v\n", err)
		} else {
		}
	}

}

func ParseData(jsonString string) []string {
	var sqlToExecute []string

	servers := Servers(jsonString)
	for _, server := range servers {
		sqlToExecute = append(sqlToExecute, SqlString(server.IpAddress, strconv.Itoa(server.Port)))
	}

	return sqlToExecute
}

// Servers 包装了具体的结构体
func Servers(jsonString string) []parse_data.Server {
	arr := gjson.Get(jsonString, "pageData")

	servers := make([]parse_data.Server, 0)

	arr.ForEach(func(key, value gjson.Result) bool {
		var server parse_data.Server
		_ = json.Unmarshal([]byte(value.String()), &server)
		servers = append(servers, server)
		return true
	})

	return servers
}

func SqlString(key, value string) string {
	addr := fmt.Sprintf("%v:%v", key, value)

	return fmt.Sprintf("INSERT INTO FavoriteServers (CreateAt, Host, Port, `Desc`, LastQueryAt, TagId, Addr) VALUES (NOW(), '%v', %v, 'Generated by l4d2-parser written in Go', NULL, NULL, '%v');\n",
		key, value, addr)
}
