// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"l4d2serverquery-go/ent/favoriteserver"
	"l4d2serverquery-go/ent/predicate"
	"l4d2serverquery-go/ent/tag"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FavoriteServerUpdate is the builder for updating FavoriteServer entities.
type FavoriteServerUpdate struct {
	config
	hooks    []Hook
	mutation *FavoriteServerMutation
}

// Where appends a list predicates to the FavoriteServerUpdate builder.
func (_u *FavoriteServerUpdate) Where(ps ...predicate.FavoriteServer) *FavoriteServerUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetAddr sets the "addr" field.
func (_u *FavoriteServerUpdate) SetAddr(v string) *FavoriteServerUpdate {
	_u.mutation.SetAddr(v)
	return _u
}

// SetNillableAddr sets the "addr" field if the given value is not nil.
func (_u *FavoriteServerUpdate) SetNillableAddr(v *string) *FavoriteServerUpdate {
	if v != nil {
		_u.SetAddr(*v)
	}
	return _u
}

// SetName sets the "name" field.
func (_u *FavoriteServerUpdate) SetName(v string) *FavoriteServerUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *FavoriteServerUpdate) SetNillableName(v *string) *FavoriteServerUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *FavoriteServerUpdate) ClearName() *FavoriteServerUpdate {
	_u.mutation.ClearName()
	return _u
}

// SetDesc sets the "desc" field.
func (_u *FavoriteServerUpdate) SetDesc(v string) *FavoriteServerUpdate {
	_u.mutation.SetDesc(v)
	return _u
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (_u *FavoriteServerUpdate) SetNillableDesc(v *string) *FavoriteServerUpdate {
	if v != nil {
		_u.SetDesc(*v)
	}
	return _u
}

// ClearDesc clears the value of the "desc" field.
func (_u *FavoriteServerUpdate) ClearDesc() *FavoriteServerUpdate {
	_u.mutation.ClearDesc()
	return _u
}

// SetLastQueryTime sets the "last_query_time" field.
func (_u *FavoriteServerUpdate) SetLastQueryTime(v time.Time) *FavoriteServerUpdate {
	_u.mutation.SetLastQueryTime(v)
	return _u
}

// SetNillableLastQueryTime sets the "last_query_time" field if the given value is not nil.
func (_u *FavoriteServerUpdate) SetNillableLastQueryTime(v *time.Time) *FavoriteServerUpdate {
	if v != nil {
		_u.SetLastQueryTime(*v)
	}
	return _u
}

// ClearLastQueryTime clears the value of the "last_query_time" field.
func (_u *FavoriteServerUpdate) ClearLastQueryTime() *FavoriteServerUpdate {
	_u.mutation.ClearLastQueryTime()
	return _u
}

// SetRank sets the "rank" field.
func (_u *FavoriteServerUpdate) SetRank(v int) *FavoriteServerUpdate {
	_u.mutation.ResetRank()
	_u.mutation.SetRank(v)
	return _u
}

// SetNillableRank sets the "rank" field if the given value is not nil.
func (_u *FavoriteServerUpdate) SetNillableRank(v *int) *FavoriteServerUpdate {
	if v != nil {
		_u.SetRank(*v)
	}
	return _u
}

// AddRank adds value to the "rank" field.
func (_u *FavoriteServerUpdate) AddRank(v int) *FavoriteServerUpdate {
	_u.mutation.AddRank(v)
	return _u
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (_u *FavoriteServerUpdate) AddTagIDs(ids ...int) *FavoriteServerUpdate {
	_u.mutation.AddTagIDs(ids...)
	return _u
}

// AddTags adds the "tags" edges to the Tag entity.
func (_u *FavoriteServerUpdate) AddTags(v ...*Tag) *FavoriteServerUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTagIDs(ids...)
}

// Mutation returns the FavoriteServerMutation object of the builder.
func (_u *FavoriteServerUpdate) Mutation() *FavoriteServerMutation {
	return _u.mutation
}

// ClearTags clears all "tags" edges to the Tag entity.
func (_u *FavoriteServerUpdate) ClearTags() *FavoriteServerUpdate {
	_u.mutation.ClearTags()
	return _u
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (_u *FavoriteServerUpdate) RemoveTagIDs(ids ...int) *FavoriteServerUpdate {
	_u.mutation.RemoveTagIDs(ids...)
	return _u
}

// RemoveTags removes "tags" edges to Tag entities.
func (_u *FavoriteServerUpdate) RemoveTags(v ...*Tag) *FavoriteServerUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTagIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *FavoriteServerUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *FavoriteServerUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *FavoriteServerUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *FavoriteServerUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *FavoriteServerUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(favoriteserver.Table, favoriteserver.Columns, sqlgraph.NewFieldSpec(favoriteserver.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Addr(); ok {
		_spec.SetField(favoriteserver.FieldAddr, field.TypeString, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(favoriteserver.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(favoriteserver.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.Desc(); ok {
		_spec.SetField(favoriteserver.FieldDesc, field.TypeString, value)
	}
	if _u.mutation.DescCleared() {
		_spec.ClearField(favoriteserver.FieldDesc, field.TypeString)
	}
	if value, ok := _u.mutation.LastQueryTime(); ok {
		_spec.SetField(favoriteserver.FieldLastQueryTime, field.TypeTime, value)
	}
	if _u.mutation.LastQueryTimeCleared() {
		_spec.ClearField(favoriteserver.FieldLastQueryTime, field.TypeTime)
	}
	if value, ok := _u.mutation.Rank(); ok {
		_spec.SetField(favoriteserver.FieldRank, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedRank(); ok {
		_spec.AddField(favoriteserver.FieldRank, field.TypeInt, value)
	}
	if _u.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   favoriteserver.TagsTable,
			Columns: favoriteserver.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTagsIDs(); len(nodes) > 0 && !_u.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   favoriteserver.TagsTable,
			Columns: favoriteserver.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   favoriteserver.TagsTable,
			Columns: favoriteserver.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{favoriteserver.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// FavoriteServerUpdateOne is the builder for updating a single FavoriteServer entity.
type FavoriteServerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FavoriteServerMutation
}

// SetAddr sets the "addr" field.
func (_u *FavoriteServerUpdateOne) SetAddr(v string) *FavoriteServerUpdateOne {
	_u.mutation.SetAddr(v)
	return _u
}

// SetNillableAddr sets the "addr" field if the given value is not nil.
func (_u *FavoriteServerUpdateOne) SetNillableAddr(v *string) *FavoriteServerUpdateOne {
	if v != nil {
		_u.SetAddr(*v)
	}
	return _u
}

// SetName sets the "name" field.
func (_u *FavoriteServerUpdateOne) SetName(v string) *FavoriteServerUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *FavoriteServerUpdateOne) SetNillableName(v *string) *FavoriteServerUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// ClearName clears the value of the "name" field.
func (_u *FavoriteServerUpdateOne) ClearName() *FavoriteServerUpdateOne {
	_u.mutation.ClearName()
	return _u
}

// SetDesc sets the "desc" field.
func (_u *FavoriteServerUpdateOne) SetDesc(v string) *FavoriteServerUpdateOne {
	_u.mutation.SetDesc(v)
	return _u
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (_u *FavoriteServerUpdateOne) SetNillableDesc(v *string) *FavoriteServerUpdateOne {
	if v != nil {
		_u.SetDesc(*v)
	}
	return _u
}

// ClearDesc clears the value of the "desc" field.
func (_u *FavoriteServerUpdateOne) ClearDesc() *FavoriteServerUpdateOne {
	_u.mutation.ClearDesc()
	return _u
}

// SetLastQueryTime sets the "last_query_time" field.
func (_u *FavoriteServerUpdateOne) SetLastQueryTime(v time.Time) *FavoriteServerUpdateOne {
	_u.mutation.SetLastQueryTime(v)
	return _u
}

// SetNillableLastQueryTime sets the "last_query_time" field if the given value is not nil.
func (_u *FavoriteServerUpdateOne) SetNillableLastQueryTime(v *time.Time) *FavoriteServerUpdateOne {
	if v != nil {
		_u.SetLastQueryTime(*v)
	}
	return _u
}

// ClearLastQueryTime clears the value of the "last_query_time" field.
func (_u *FavoriteServerUpdateOne) ClearLastQueryTime() *FavoriteServerUpdateOne {
	_u.mutation.ClearLastQueryTime()
	return _u
}

// SetRank sets the "rank" field.
func (_u *FavoriteServerUpdateOne) SetRank(v int) *FavoriteServerUpdateOne {
	_u.mutation.ResetRank()
	_u.mutation.SetRank(v)
	return _u
}

// SetNillableRank sets the "rank" field if the given value is not nil.
func (_u *FavoriteServerUpdateOne) SetNillableRank(v *int) *FavoriteServerUpdateOne {
	if v != nil {
		_u.SetRank(*v)
	}
	return _u
}

// AddRank adds value to the "rank" field.
func (_u *FavoriteServerUpdateOne) AddRank(v int) *FavoriteServerUpdateOne {
	_u.mutation.AddRank(v)
	return _u
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (_u *FavoriteServerUpdateOne) AddTagIDs(ids ...int) *FavoriteServerUpdateOne {
	_u.mutation.AddTagIDs(ids...)
	return _u
}

// AddTags adds the "tags" edges to the Tag entity.
func (_u *FavoriteServerUpdateOne) AddTags(v ...*Tag) *FavoriteServerUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTagIDs(ids...)
}

// Mutation returns the FavoriteServerMutation object of the builder.
func (_u *FavoriteServerUpdateOne) Mutation() *FavoriteServerMutation {
	return _u.mutation
}

// ClearTags clears all "tags" edges to the Tag entity.
func (_u *FavoriteServerUpdateOne) ClearTags() *FavoriteServerUpdateOne {
	_u.mutation.ClearTags()
	return _u
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (_u *FavoriteServerUpdateOne) RemoveTagIDs(ids ...int) *FavoriteServerUpdateOne {
	_u.mutation.RemoveTagIDs(ids...)
	return _u
}

// RemoveTags removes "tags" edges to Tag entities.
func (_u *FavoriteServerUpdateOne) RemoveTags(v ...*Tag) *FavoriteServerUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTagIDs(ids...)
}

// Where appends a list predicates to the FavoriteServerUpdate builder.
func (_u *FavoriteServerUpdateOne) Where(ps ...predicate.FavoriteServer) *FavoriteServerUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *FavoriteServerUpdateOne) Select(field string, fields ...string) *FavoriteServerUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated FavoriteServer entity.
func (_u *FavoriteServerUpdateOne) Save(ctx context.Context) (*FavoriteServer, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *FavoriteServerUpdateOne) SaveX(ctx context.Context) *FavoriteServer {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *FavoriteServerUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *FavoriteServerUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *FavoriteServerUpdateOne) sqlSave(ctx context.Context) (_node *FavoriteServer, err error) {
	_spec := sqlgraph.NewUpdateSpec(favoriteserver.Table, favoriteserver.Columns, sqlgraph.NewFieldSpec(favoriteserver.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FavoriteServer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, favoriteserver.FieldID)
		for _, f := range fields {
			if !favoriteserver.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != favoriteserver.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Addr(); ok {
		_spec.SetField(favoriteserver.FieldAddr, field.TypeString, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(favoriteserver.FieldName, field.TypeString, value)
	}
	if _u.mutation.NameCleared() {
		_spec.ClearField(favoriteserver.FieldName, field.TypeString)
	}
	if value, ok := _u.mutation.Desc(); ok {
		_spec.SetField(favoriteserver.FieldDesc, field.TypeString, value)
	}
	if _u.mutation.DescCleared() {
		_spec.ClearField(favoriteserver.FieldDesc, field.TypeString)
	}
	if value, ok := _u.mutation.LastQueryTime(); ok {
		_spec.SetField(favoriteserver.FieldLastQueryTime, field.TypeTime, value)
	}
	if _u.mutation.LastQueryTimeCleared() {
		_spec.ClearField(favoriteserver.FieldLastQueryTime, field.TypeTime)
	}
	if value, ok := _u.mutation.Rank(); ok {
		_spec.SetField(favoriteserver.FieldRank, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedRank(); ok {
		_spec.AddField(favoriteserver.FieldRank, field.TypeInt, value)
	}
	if _u.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   favoriteserver.TagsTable,
			Columns: favoriteserver.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTagsIDs(); len(nodes) > 0 && !_u.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   favoriteserver.TagsTable,
			Columns: favoriteserver.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   favoriteserver.TagsTable,
			Columns: favoriteserver.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &FavoriteServer{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{favoriteserver.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
