// Code generated by ent, DO NOT EDIT.

package tag

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the tag type in the database.
	Label = "tag"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldRank holds the string denoting the rank field in the database.
	FieldRank = "rank"
	// EdgeServers holds the string denoting the servers edge name in mutations.
	EdgeServers = "servers"
	// Table holds the table name of the tag in the database.
	Table = "tags"
	// ServersTable is the table that holds the servers relation/edge. The primary key declared below.
	ServersTable = "tag_servers"
	// ServersInverseTable is the table name for the FavoriteServer entity.
	// It exists in this package in order to avoid circular dependency with the "favoriteserver" package.
	ServersInverseTable = "favorite_servers"
)

// Columns holds all SQL columns for tag fields.
var Columns = []string{
	FieldID,
	FieldDescription,
	FieldName,
	FieldRank,
}

var (
	// ServersPrimaryKey and ServersColumn2 are the table columns denoting the
	// primary key for the servers relation (M2M).
	ServersPrimaryKey = []string{"tag_id", "favorite_server_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Tag queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByRank orders the results by the rank field.
func ByRank(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRank, opts...).ToFunc()
}

// ByServersCount orders the results by servers count.
func ByServersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newServersStep(), opts...)
	}
}

// ByServers orders the results by servers terms.
func ByServers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newServersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newServersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ServersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, ServersTable, ServersPrimaryKey...),
	)
}
