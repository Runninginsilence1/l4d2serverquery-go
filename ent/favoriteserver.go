// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"l4d2serverquery-go/ent/favoriteserver"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// FavoriteServer is the model entity for the FavoriteServer schema.
type FavoriteServer struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Addr holds the value of the "addr" field.
	Addr string `json:"addr,omitempty"`
	// Desc holds the value of the "desc" field.
	Desc string `json:"desc,omitempty"`
	// LastQueryTime holds the value of the "last_query_time" field.
	LastQueryTime time.Time `json:"last_query_time,omitempty"`
	// Rank holds the value of the "rank" field.
	Rank int `json:"rank,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FavoriteServerQuery when eager-loading is set.
	Edges        FavoriteServerEdges `json:"edges"`
	selectValues sql.SelectValues
}

// FavoriteServerEdges holds the relations/edges for other nodes in the graph.
type FavoriteServerEdges struct {
	// Tags holds the value of the tags edge.
	Tags []*Tag `json:"tags,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TagsOrErr returns the Tags value or an error if the edge
// was not loaded in eager-loading.
func (e FavoriteServerEdges) TagsOrErr() ([]*Tag, error) {
	if e.loadedTypes[0] {
		return e.Tags, nil
	}
	return nil, &NotLoadedError{edge: "tags"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FavoriteServer) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case favoriteserver.FieldID, favoriteserver.FieldRank:
			values[i] = new(sql.NullInt64)
		case favoriteserver.FieldAddr, favoriteserver.FieldDesc:
			values[i] = new(sql.NullString)
		case favoriteserver.FieldLastQueryTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FavoriteServer fields.
func (fs *FavoriteServer) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case favoriteserver.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fs.ID = int(value.Int64)
		case favoriteserver.FieldAddr:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field addr", values[i])
			} else if value.Valid {
				fs.Addr = value.String
			}
		case favoriteserver.FieldDesc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field desc", values[i])
			} else if value.Valid {
				fs.Desc = value.String
			}
		case favoriteserver.FieldLastQueryTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_query_time", values[i])
			} else if value.Valid {
				fs.LastQueryTime = value.Time
			}
		case favoriteserver.FieldRank:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rank", values[i])
			} else if value.Valid {
				fs.Rank = int(value.Int64)
			}
		default:
			fs.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FavoriteServer.
// This includes values selected through modifiers, order, etc.
func (fs *FavoriteServer) Value(name string) (ent.Value, error) {
	return fs.selectValues.Get(name)
}

// QueryTags queries the "tags" edge of the FavoriteServer entity.
func (fs *FavoriteServer) QueryTags() *TagQuery {
	return NewFavoriteServerClient(fs.config).QueryTags(fs)
}

// Update returns a builder for updating this FavoriteServer.
// Note that you need to call FavoriteServer.Unwrap() before calling this method if this FavoriteServer
// was returned from a transaction, and the transaction was committed or rolled back.
func (fs *FavoriteServer) Update() *FavoriteServerUpdateOne {
	return NewFavoriteServerClient(fs.config).UpdateOne(fs)
}

// Unwrap unwraps the FavoriteServer entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fs *FavoriteServer) Unwrap() *FavoriteServer {
	_tx, ok := fs.config.driver.(*txDriver)
	if !ok {
		panic("ent: FavoriteServer is not a transactional entity")
	}
	fs.config.driver = _tx.drv
	return fs
}

// String implements the fmt.Stringer.
func (fs *FavoriteServer) String() string {
	var builder strings.Builder
	builder.WriteString("FavoriteServer(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fs.ID))
	builder.WriteString("addr=")
	builder.WriteString(fs.Addr)
	builder.WriteString(", ")
	builder.WriteString("desc=")
	builder.WriteString(fs.Desc)
	builder.WriteString(", ")
	builder.WriteString("last_query_time=")
	builder.WriteString(fs.LastQueryTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("rank=")
	builder.WriteString(fmt.Sprintf("%v", fs.Rank))
	builder.WriteByte(')')
	return builder.String()
}

// FavoriteServers is a parsable slice of FavoriteServer.
type FavoriteServers []*FavoriteServer
