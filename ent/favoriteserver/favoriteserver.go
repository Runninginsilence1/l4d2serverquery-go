// Code generated by ent, DO NOT EDIT.

package favoriteserver

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the favoriteserver type in the database.
	Label = "favorite_server"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAddr holds the string denoting the addr field in the database.
	FieldAddr = "addr"
	// FieldDesc holds the string denoting the desc field in the database.
	FieldDesc = "desc"
	// FieldLastQueryTime holds the string denoting the last_query_time field in the database.
	FieldLastQueryTime = "last_query_time"
	// FieldRank holds the string denoting the rank field in the database.
	FieldRank = "rank"
	// EdgeTags holds the string denoting the tags edge name in mutations.
	EdgeTags = "tags"
	// Table holds the table name of the favoriteserver in the database.
	Table = "favorite_servers"
	// TagsTable is the table that holds the tags relation/edge. The primary key declared below.
	TagsTable = "tag_servers"
	// TagsInverseTable is the table name for the Tag entity.
	// It exists in this package in order to avoid circular dependency with the "tag" package.
	TagsInverseTable = "tags"
)

// Columns holds all SQL columns for favoriteserver fields.
var Columns = []string{
	FieldID,
	FieldAddr,
	FieldDesc,
	FieldLastQueryTime,
	FieldRank,
}

var (
	// TagsPrimaryKey and TagsColumn2 are the table columns denoting the
	// primary key for the tags relation (M2M).
	TagsPrimaryKey = []string{"tag_id", "favorite_server_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultRank holds the default value on creation for the "rank" field.
	DefaultRank int
)

// OrderOption defines the ordering options for the FavoriteServer queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAddr orders the results by the addr field.
func ByAddr(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddr, opts...).ToFunc()
}

// ByDesc orders the results by the desc field.
func ByDesc(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDesc, opts...).ToFunc()
}

// ByLastQueryTime orders the results by the last_query_time field.
func ByLastQueryTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastQueryTime, opts...).ToFunc()
}

// ByRank orders the results by the rank field.
func ByRank(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRank, opts...).ToFunc()
}

// ByTagsCount orders the results by tags count.
func ByTagsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTagsStep(), opts...)
	}
}

// ByTags orders the results by tags terms.
func ByTags(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTagsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTagsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TagsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, TagsTable, TagsPrimaryKey...),
	)
}
