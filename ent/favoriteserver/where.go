// Code generated by ent, DO NOT EDIT.

package favoriteserver

import (
	"l4d2serverquery-go/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldLTE(FieldID, id))
}

// Addr applies equality check predicate on the "addr" field. It's identical to AddrEQ.
func Addr(v string) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldEQ(FieldAddr, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldEQ(FieldName, v))
}

// Desc applies equality check predicate on the "desc" field. It's identical to DescEQ.
func Desc(v string) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldEQ(FieldDesc, v))
}

// LastQueryTime applies equality check predicate on the "last_query_time" field. It's identical to LastQueryTimeEQ.
func LastQueryTime(v time.Time) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldEQ(FieldLastQueryTime, v))
}

// Rank applies equality check predicate on the "rank" field. It's identical to RankEQ.
func Rank(v int) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldEQ(FieldRank, v))
}

// AddrEQ applies the EQ predicate on the "addr" field.
func AddrEQ(v string) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldEQ(FieldAddr, v))
}

// AddrNEQ applies the NEQ predicate on the "addr" field.
func AddrNEQ(v string) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldNEQ(FieldAddr, v))
}

// AddrIn applies the In predicate on the "addr" field.
func AddrIn(vs ...string) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldIn(FieldAddr, vs...))
}

// AddrNotIn applies the NotIn predicate on the "addr" field.
func AddrNotIn(vs ...string) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldNotIn(FieldAddr, vs...))
}

// AddrGT applies the GT predicate on the "addr" field.
func AddrGT(v string) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldGT(FieldAddr, v))
}

// AddrGTE applies the GTE predicate on the "addr" field.
func AddrGTE(v string) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldGTE(FieldAddr, v))
}

// AddrLT applies the LT predicate on the "addr" field.
func AddrLT(v string) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldLT(FieldAddr, v))
}

// AddrLTE applies the LTE predicate on the "addr" field.
func AddrLTE(v string) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldLTE(FieldAddr, v))
}

// AddrContains applies the Contains predicate on the "addr" field.
func AddrContains(v string) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldContains(FieldAddr, v))
}

// AddrHasPrefix applies the HasPrefix predicate on the "addr" field.
func AddrHasPrefix(v string) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldHasPrefix(FieldAddr, v))
}

// AddrHasSuffix applies the HasSuffix predicate on the "addr" field.
func AddrHasSuffix(v string) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldHasSuffix(FieldAddr, v))
}

// AddrEqualFold applies the EqualFold predicate on the "addr" field.
func AddrEqualFold(v string) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldEqualFold(FieldAddr, v))
}

// AddrContainsFold applies the ContainsFold predicate on the "addr" field.
func AddrContainsFold(v string) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldContainsFold(FieldAddr, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldContainsFold(FieldName, v))
}

// DescEQ applies the EQ predicate on the "desc" field.
func DescEQ(v string) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldEQ(FieldDesc, v))
}

// DescNEQ applies the NEQ predicate on the "desc" field.
func DescNEQ(v string) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldNEQ(FieldDesc, v))
}

// DescIn applies the In predicate on the "desc" field.
func DescIn(vs ...string) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldIn(FieldDesc, vs...))
}

// DescNotIn applies the NotIn predicate on the "desc" field.
func DescNotIn(vs ...string) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldNotIn(FieldDesc, vs...))
}

// DescGT applies the GT predicate on the "desc" field.
func DescGT(v string) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldGT(FieldDesc, v))
}

// DescGTE applies the GTE predicate on the "desc" field.
func DescGTE(v string) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldGTE(FieldDesc, v))
}

// DescLT applies the LT predicate on the "desc" field.
func DescLT(v string) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldLT(FieldDesc, v))
}

// DescLTE applies the LTE predicate on the "desc" field.
func DescLTE(v string) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldLTE(FieldDesc, v))
}

// DescContains applies the Contains predicate on the "desc" field.
func DescContains(v string) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldContains(FieldDesc, v))
}

// DescHasPrefix applies the HasPrefix predicate on the "desc" field.
func DescHasPrefix(v string) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldHasPrefix(FieldDesc, v))
}

// DescHasSuffix applies the HasSuffix predicate on the "desc" field.
func DescHasSuffix(v string) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldHasSuffix(FieldDesc, v))
}

// DescIsNil applies the IsNil predicate on the "desc" field.
func DescIsNil() predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldIsNull(FieldDesc))
}

// DescNotNil applies the NotNil predicate on the "desc" field.
func DescNotNil() predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldNotNull(FieldDesc))
}

// DescEqualFold applies the EqualFold predicate on the "desc" field.
func DescEqualFold(v string) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldEqualFold(FieldDesc, v))
}

// DescContainsFold applies the ContainsFold predicate on the "desc" field.
func DescContainsFold(v string) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldContainsFold(FieldDesc, v))
}

// LastQueryTimeEQ applies the EQ predicate on the "last_query_time" field.
func LastQueryTimeEQ(v time.Time) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldEQ(FieldLastQueryTime, v))
}

// LastQueryTimeNEQ applies the NEQ predicate on the "last_query_time" field.
func LastQueryTimeNEQ(v time.Time) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldNEQ(FieldLastQueryTime, v))
}

// LastQueryTimeIn applies the In predicate on the "last_query_time" field.
func LastQueryTimeIn(vs ...time.Time) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldIn(FieldLastQueryTime, vs...))
}

// LastQueryTimeNotIn applies the NotIn predicate on the "last_query_time" field.
func LastQueryTimeNotIn(vs ...time.Time) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldNotIn(FieldLastQueryTime, vs...))
}

// LastQueryTimeGT applies the GT predicate on the "last_query_time" field.
func LastQueryTimeGT(v time.Time) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldGT(FieldLastQueryTime, v))
}

// LastQueryTimeGTE applies the GTE predicate on the "last_query_time" field.
func LastQueryTimeGTE(v time.Time) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldGTE(FieldLastQueryTime, v))
}

// LastQueryTimeLT applies the LT predicate on the "last_query_time" field.
func LastQueryTimeLT(v time.Time) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldLT(FieldLastQueryTime, v))
}

// LastQueryTimeLTE applies the LTE predicate on the "last_query_time" field.
func LastQueryTimeLTE(v time.Time) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldLTE(FieldLastQueryTime, v))
}

// LastQueryTimeIsNil applies the IsNil predicate on the "last_query_time" field.
func LastQueryTimeIsNil() predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldIsNull(FieldLastQueryTime))
}

// LastQueryTimeNotNil applies the NotNil predicate on the "last_query_time" field.
func LastQueryTimeNotNil() predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldNotNull(FieldLastQueryTime))
}

// RankEQ applies the EQ predicate on the "rank" field.
func RankEQ(v int) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldEQ(FieldRank, v))
}

// RankNEQ applies the NEQ predicate on the "rank" field.
func RankNEQ(v int) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldNEQ(FieldRank, v))
}

// RankIn applies the In predicate on the "rank" field.
func RankIn(vs ...int) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldIn(FieldRank, vs...))
}

// RankNotIn applies the NotIn predicate on the "rank" field.
func RankNotIn(vs ...int) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldNotIn(FieldRank, vs...))
}

// RankGT applies the GT predicate on the "rank" field.
func RankGT(v int) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldGT(FieldRank, v))
}

// RankGTE applies the GTE predicate on the "rank" field.
func RankGTE(v int) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldGTE(FieldRank, v))
}

// RankLT applies the LT predicate on the "rank" field.
func RankLT(v int) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldLT(FieldRank, v))
}

// RankLTE applies the LTE predicate on the "rank" field.
func RankLTE(v int) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.FieldLTE(FieldRank, v))
}

// HasTags applies the HasEdge predicate on the "tags" edge.
func HasTags() predicate.FavoriteServer {
	return predicate.FavoriteServer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, TagsTable, TagsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTagsWith applies the HasEdge predicate on the "tags" edge with a given conditions (other predicates).
func HasTagsWith(preds ...predicate.Tag) predicate.FavoriteServer {
	return predicate.FavoriteServer(func(s *sql.Selector) {
		step := newTagsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.FavoriteServer) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.FavoriteServer) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.FavoriteServer) predicate.FavoriteServer {
	return predicate.FavoriteServer(sql.NotPredicates(p))
}
