// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"l4d2serverquery-go/ent/favoriteserver"
	"l4d2serverquery-go/ent/tag"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FavoriteServerCreate is the builder for creating a FavoriteServer entity.
type FavoriteServerCreate struct {
	config
	mutation *FavoriteServerMutation
	hooks    []Hook
}

// SetAddr sets the "addr" field.
func (_c *FavoriteServerCreate) SetAddr(v string) *FavoriteServerCreate {
	_c.mutation.SetAddr(v)
	return _c
}

// SetName sets the "name" field.
func (_c *FavoriteServerCreate) SetName(v string) *FavoriteServerCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_c *FavoriteServerCreate) SetNillableName(v *string) *FavoriteServerCreate {
	if v != nil {
		_c.SetName(*v)
	}
	return _c
}

// SetDesc sets the "desc" field.
func (_c *FavoriteServerCreate) SetDesc(v string) *FavoriteServerCreate {
	_c.mutation.SetDesc(v)
	return _c
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (_c *FavoriteServerCreate) SetNillableDesc(v *string) *FavoriteServerCreate {
	if v != nil {
		_c.SetDesc(*v)
	}
	return _c
}

// SetLastQueryTime sets the "last_query_time" field.
func (_c *FavoriteServerCreate) SetLastQueryTime(v time.Time) *FavoriteServerCreate {
	_c.mutation.SetLastQueryTime(v)
	return _c
}

// SetNillableLastQueryTime sets the "last_query_time" field if the given value is not nil.
func (_c *FavoriteServerCreate) SetNillableLastQueryTime(v *time.Time) *FavoriteServerCreate {
	if v != nil {
		_c.SetLastQueryTime(*v)
	}
	return _c
}

// SetRank sets the "rank" field.
func (_c *FavoriteServerCreate) SetRank(v int) *FavoriteServerCreate {
	_c.mutation.SetRank(v)
	return _c
}

// SetNillableRank sets the "rank" field if the given value is not nil.
func (_c *FavoriteServerCreate) SetNillableRank(v *int) *FavoriteServerCreate {
	if v != nil {
		_c.SetRank(*v)
	}
	return _c
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (_c *FavoriteServerCreate) AddTagIDs(ids ...int) *FavoriteServerCreate {
	_c.mutation.AddTagIDs(ids...)
	return _c
}

// AddTags adds the "tags" edges to the Tag entity.
func (_c *FavoriteServerCreate) AddTags(v ...*Tag) *FavoriteServerCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddTagIDs(ids...)
}

// Mutation returns the FavoriteServerMutation object of the builder.
func (_c *FavoriteServerCreate) Mutation() *FavoriteServerMutation {
	return _c.mutation
}

// Save creates the FavoriteServer in the database.
func (_c *FavoriteServerCreate) Save(ctx context.Context) (*FavoriteServer, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *FavoriteServerCreate) SaveX(ctx context.Context) *FavoriteServer {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *FavoriteServerCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *FavoriteServerCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *FavoriteServerCreate) defaults() {
	if _, ok := _c.mutation.Rank(); !ok {
		v := favoriteserver.DefaultRank
		_c.mutation.SetRank(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *FavoriteServerCreate) check() error {
	if _, ok := _c.mutation.Addr(); !ok {
		return &ValidationError{Name: "addr", err: errors.New(`ent: missing required field "FavoriteServer.addr"`)}
	}
	if _, ok := _c.mutation.Rank(); !ok {
		return &ValidationError{Name: "rank", err: errors.New(`ent: missing required field "FavoriteServer.rank"`)}
	}
	return nil
}

func (_c *FavoriteServerCreate) sqlSave(ctx context.Context) (*FavoriteServer, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *FavoriteServerCreate) createSpec() (*FavoriteServer, *sqlgraph.CreateSpec) {
	var (
		_node = &FavoriteServer{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(favoriteserver.Table, sqlgraph.NewFieldSpec(favoriteserver.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.Addr(); ok {
		_spec.SetField(favoriteserver.FieldAddr, field.TypeString, value)
		_node.Addr = value
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(favoriteserver.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.Desc(); ok {
		_spec.SetField(favoriteserver.FieldDesc, field.TypeString, value)
		_node.Desc = value
	}
	if value, ok := _c.mutation.LastQueryTime(); ok {
		_spec.SetField(favoriteserver.FieldLastQueryTime, field.TypeTime, value)
		_node.LastQueryTime = value
	}
	if value, ok := _c.mutation.Rank(); ok {
		_spec.SetField(favoriteserver.FieldRank, field.TypeInt, value)
		_node.Rank = value
	}
	if nodes := _c.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   favoriteserver.TagsTable,
			Columns: favoriteserver.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FavoriteServerCreateBulk is the builder for creating many FavoriteServer entities in bulk.
type FavoriteServerCreateBulk struct {
	config
	err      error
	builders []*FavoriteServerCreate
}

// Save creates the FavoriteServer entities in the database.
func (_c *FavoriteServerCreateBulk) Save(ctx context.Context) ([]*FavoriteServer, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*FavoriteServer, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FavoriteServerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *FavoriteServerCreateBulk) SaveX(ctx context.Context) []*FavoriteServer {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *FavoriteServerCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *FavoriteServerCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
